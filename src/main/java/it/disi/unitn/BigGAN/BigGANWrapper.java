package it.disi.unitn.BigGAN;

import ai.djl.Application;
import ai.djl.ModelException;
import ai.djl.inference.Predictor;
import ai.djl.modality.cv.Image;
import ai.djl.repository.zoo.Criteria;
import ai.djl.repository.zoo.ZooModel;
import ai.djl.training.util.ProgressBar;
import ai.djl.translate.TranslateException;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import it.disi.unitn.StringExt;
import it.disi.unitn.exceptions.InvalidArgumentException;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

/**
 * Questa classe permette di utilizzare una rete neurale BigGAN per generare immagini da una lista di caratteristiche
 * (non specificate sotto forma di frase). ATTENZIONE: le caratteristiche devono essere specificate sotto forma di
 * categorie (esattamente come nel file <a href="https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a">qui</a> presente).
 */
public class BigGANWrapper {
    private static final Logger logger = LoggerFactory.getLogger(BigGANWrapper.class);
    private final Map<String, String> map;
    private final HashSet<String> descs;

    /**
     * Il costruttore della classe.
     * @param jmap L'istanza di Map che mappa la categoria espressa come chiave all'intero espresso come valore
     * @param descriptions La lista di descrizioni fornite dall'utente. ATTENZIONE: sia l'argomento che nessuna delle
     *                     caratteristiche possono essere null
     */
    private BigGANWrapper(@NotNull Map<String, String> jmap,
                         @NotNull String @NotNull ... descriptions) {
        map = jmap;
        descs = new HashSet<>();
        descs.addAll(List.of(descriptions));
    }

    /**
     * Questo metodo permette di salvare le immagini prodotte dalla rete neurale.
     * @param pathToImagesFolder La cartella che conterr&agrave; le immagini generate
     * @param generatedImages Le immagini generate dalla rete neurale
     * @param extension L'estensione delle immagini risultanti
     * @throws IOException Se accade un errore di I/O
     * @throws IllegalArgumentException Se il primo argomento &egrave; null
     */
    public void saveImages(@NotNull String pathToImagesFolder, Image @NotNull [] generatedImages, String extension)
            throws IOException, IllegalArgumentException {
        if(pathToImagesFolder == null || pathToImagesFolder.isEmpty()) {
            throw new IllegalArgumentException("The first argument to this method cannot be null.");
        }
        Path outputPath = Paths.get(pathToImagesFolder); //Get output folder
        Files.createDirectories(outputPath);

        for (int i = 0; i < generatedImages.length; ++i) {
            try {
                StringExt s = new StringExt(String.valueOf(i));
                s.padStart();
                Path imagePath = outputPath.resolve(s.getVal() + "." + extension);
                generatedImages[i].save(Files.newOutputStream(imagePath), extension);
            } catch (InvalidArgumentException ex) {
                System.err.println(ex.getMessage());
                System.err.println("Si prega di contattare il produttore della libreria per risolvere il problema.");
            }
        }
        logger.info("Generated images have been saved in: {}", outputPath);
    }

    /**
     * This method allows to generate images from the categories that the user gave as input.
     * @return An array of images generated by the neural network, or null if a ModelException exception occurs
     * @throws IOException If an I/O error occurs
     * @throws TranslateException If an error occurs during the generation of the images
     */
    public Image[] generate() throws IOException, TranslateException {
        //DJL model zoo contains 3 BigGAN generators for different
        //square image output sizes, 128px, 256px and 512px.
        Criteria<int[], Image[]> criteria =
                Criteria.builder()
                        .optApplication(Application.CV.IMAGE_GENERATION)
                        .setTypes(int[].class, Image[].class)
                        .optFilter("size", "512")
                        .optArgument("truncation", 0.4f)
                        .optEngine("PyTorch")
                        .optProgress(new ProgressBar())
                        .build();

        //Query map before using the neural network
        List<Integer> mappings = new ArrayList<>();
        for(String s: descs) {
            //Here we use streams to deal with the search for a substring.
            Map.Entry<String, String> s1 = map.entrySet().stream()
                    .filter(e -> e.getKey().contains(s))
                    .findFirst()
                    .orElse(null);
            if(s1 == null) {
                System.err.println(s);
                throw new IllegalArgumentException("Not a category on which the neural network was trained on.");
            }
            String val = s1.getValue();
            mappings.add(Integer.parseInt(val));
        }

        //Now we create the input data for the network
        int[] input = new int[mappings.size()];
        int j = 0;
        for(Integer i: mappings) {
            input[j] = i;
        }

        try (ZooModel<int[], Image[]> model = criteria.loadModel();
             Predictor<int[], Image[]> generator = model.newPredictor()) {
            return generator.predict(input);
        } catch (ModelException ex) {
            System.err.println("No model was found for the given criteria. Please contact the library's owner to solve" +
                    " this problem.");
        }
        return null;
    }

    /**
     * Metodo statico per la creazione di un'istanza della classe BigGANWrapper.
     * @param file Il file su cui la BigGAN è stata allenata. ATTENZIONE: il file deve avere lo stesso formato di
     *             <a href="https://gist.github.com/yrevar/942d3a0ac09ec9e5eb3a">questo file</a>.
     * @param descriptions La lista di categorie fornite dall'utente. Ciascuna di queste categorie deve essere contenuta
     *                     all'interno del file fornito in input
     * @return Un'istanza della classe BigGANWrapper
     * @throws IOException Se accade un errore di I/O
     * @throws IllegalArgumentException Se almeno uno degli argomenti forniti è null o se una delle descrizioni fornite
     * non è presente nel file fornito in input
     */
    public static @NotNull BigGANWrapper create(@NotNull String file, @NotNull String @NotNull ... descriptions)
            throws IOException, IllegalArgumentException {
        if(file == null) {
            throw new IllegalArgumentException("L'argomento a questo metodo puo' essere null.");
        }
        try(Reader r = new FileReader(file)) {
            Gson gson = new GsonBuilder().create();
            JsonObject object = gson.fromJson(r, JsonObject.class);
            Map<String, String> jmap = new HashMap<>();
            int i = 0;
            for(Map.Entry<String, JsonElement> e: object.entrySet()) {
                jmap.put(e.getValue().getAsString(), String.valueOf(i));
            }
            for(String s: descriptions) {
                if(s == null) {
                    throw new IllegalArgumentException("Nessuna descrizione puo' avere valore null.");
                }
                JsonObject o = new JsonObject();
                o.addProperty(s, "0");

                boolean contains = false;
                for(String s1: jmap.keySet()) {
                    if (s1.contains(s)) {
                        contains = true;
                        break;
                    }
                }
                if(!contains) {
                    throw new IllegalArgumentException("Questa rete neurale non e' stata allenata su " +
                            "descrizioni di questo tipo.");
                }
            }

            return new BigGANWrapper(jmap, descriptions);
        }
    }
}
