buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id "com.google.cloud.artifactregistry.gradle-plugin" version "2.2.0"
    //id 'cpp'
}

group 'it.disi.unitn'
version '1.1.8'

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_18
    targetCompatibility = JavaVersion.VERSION_18
}

configurations {
    java11ApiElements {
        attributes {
            attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 18
        }
    }
    java11RuntimeElements {
        attributes {
            attribute TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 18
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId  'it.disi.unitn.ffmpeg'
            from components.java
        }
    }
    repositories {
        maven {
            url "artifactregistry://europe-west8-maven.pkg.dev/tirocinio-380209/ffmpeg-java"
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "artifactregistry://europe-west8-maven.pkg.dev/tirocinio-380209/ffmpeg-java"
    }
}

/*compileJava {
    options.setHeaderOutputDirectory(new File("./src/ffcodec/cpp"))
}

import org.gradle.internal.jvm.Jvm

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        compileFfcodecSharedLibraryFfcodecCpp(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
            }
        }
    }
}

tasks.register("compileFfcodecSharedLibraryFfcodecCpp") {
    inputs.files compileJava
}*/

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    implementation platform('com.google.cloud:libraries-bom:26.34.0')
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation ('com.google.cloud:google-cloud-texttospeech:2.13.0')

    implementation 'org.slf4j:slf4j-api:1.7.5'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-exec:1.3'
}

test {
    useJUnitPlatform()
}